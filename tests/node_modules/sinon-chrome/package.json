{
  "name": "sinon-chrome",
  "version": "0.2.1",
  "description": "Mock of chrome extensions API for unit testing under nodejs",
  "homepage": "https://github.com/vitalets/sinon-chrome",
  "author": {
    "name": "Vitaliy Potapov",
    "email": "noginsk@rambler.ru"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/vitalets/sinon-chrome.git"
  },
  "bugs": {
    "url": "https://github.com/vitalets/sinon-chrome/issues"
  },
  "main": "src/chrome.js",
  "scripts": {
    "test": "grunt test",
    "prepublish": "grunt build"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.10.0",
    "mocha": "^2.0.1",
    "sinon": "^1.10.0",
    "grunt-mocha-test": "^0.12.2",
    "chai": "^1.9.2",
    "load-grunt-tasks": "^1.0.0",
    "grunt-contrib-concat": "^0.5.0"
  },
  "readme": "# sinon-chrome\n## What is it?\nMocks of [chrome.* extensions API](https://developer.chrome.com/extensions) via [SinonJS stubs](http://sinonjs.org/docs/#stubs).\n\n## Why this is needed?\nTo run unit-tests of chrome extensions.\n**Features:**\n - global `chrome` object with lazy methods initialization\n - support of `chrome.alarms` via `setTimeout`\n - support of chrome events manual triggering\n\n## How to install?\n````\nnpm i sinon-chrome\n````\n\n## How to use?\nTo start writing unit-tests you should re-arrange a bit your extension sources:\n````js\n|--src      // extension sources\n|  |--manifest.json\n|  |-- ...\n|\n|--test\n   |--data  // fake json results of chrome.* api calls\n   |   |--tabs.query.json\n   |   |--tabs.get.json\n   |   |--...\n   |\n   |--bg.test.js    // background page tests\n   |--popup.test.js // popup page tests\n   |--empty.html    // empty html file used as generated background page\n   |--...\n````\n\nNext install all required stuff (if not yet):\n\n1. [nodejs](http://nodejs.org)\n2. **sinon-chrome** (it will automatically install phantomjs and sinonjs)\n3. [mocha](http://mochajs.org) or any other testing framework\n4. [chaijs](http://chaijs.com) or any other assertion library\n\nAssume we have simple chrome extension that displays number of opened tabs in button badge.\n\n*background page:*\n````js\nchrome.tabs.query({}, function(tabs) {\n  chrome.browserAction.setBadgeText({text: String(tabs.length)});\n});\n````\nTest plan:\n1. inject our fake chrome.* api into phantomjs\n2. mock `chrome.tabs.query` to return pre-defined response, e.g. [2 tabs](/example/test/data/tabs.query.json)\n3. run our background page in phantomjs / nodejs\n4. assert that button badge equals to '2'\n\nThe code snippet with comments (phantomjs):\n**beforeEach**\n````js\nvar node_modules = '../../node_modules/';\n// load mocha\nphantom.injectJs(node_modules + 'mocha/mocha.js');\nphantom.injectJs(node_modules + 'sinon-chrome/src/phantom-tweaks.js');\nmocha.setup({ui: 'bdd', reporter: 'spec'});\n\nvar fs = require('fs');\nvar page;\nvar beforeLoadFn;\n\nbeforeEach(function() {\n  page = require('webpage').create();\n\n  page.onConsoleMessage = function(msg) {\n    console.log(msg);\n  };\n\n  page.onError = function(msg, trace) {\n    var msgStack = [msg];\n    if (trace && trace.length) {\n      msgStack.push('TRACE:');\n      trace.forEach(function(t) {\n        msgStack.push(' -> ' + t.file + ': ' + t.line + (t.function ? ' (in function \"' + t.function +'\")' : ''));\n      });\n    }\n    // we need try..catch here as mocha throws error that catched by phantom.onError\n    try {\n      mocha.throwError(msgStack.join('\\n'));\n    } catch(e) { }\n  };\n\n  // inject chrome.* api mocks and other stuff into page\n  page.onInitialized = function() {\n    page.injectJs(node_modules + 'chai/chai.js');\n    page.injectJs(node_modules + 'sinon/pkg/sinon-1.11.1.js');\n    page.injectJs(node_modules + 'sinon-chrome/chrome.js');\n    page.injectJs(node_modules + 'sinon-chrome/src/phantom-tweaks.js');\n    page.evaluate(function() {\n      assert = chai.assert;\n    });\n    // run additional functions before page load\n    if (beforeLoadFn) {\n      beforeLoadFn();\n    }\n  };\n});\n\nafterEach(function() {\n  page.close();\n  beforeLoadFn = null;\n});\n````\n\n**tests**\n````js\n// tests\ndescribe('background page', function() {\n\n  // sometimes it takes time to start phantomjs\n  this.timeout(4000);\n\n  it('should display opened tabs in button badge', function(done) {\n    // #1. open empty page and inject chrome.* api mocks\n    page.open('test/empty.html', function() {\n      // #2. stub `chrome.tabs.query` to return pre-defined response\n      page.evaluate(function(tabs) {\n        chrome.tabs.query.yields(JSON.parse(tabs));\n      }, fs.read('test/data/tabs.query.json'));\n\n      // #3. run background js\n      page.injectJs('src/background.js');\n\n      // #4. assert that button badge equals to '2'\n      page.evaluate(function() {\n        sinon.assert.calledOnce(chrome.browserAction.setBadgeText);\n        sinon.assert.calledWithMatch(chrome.browserAction.setBadgeText, {\n            text: \"2\"\n        });\n      });\n      done();\n    });\n  });\n\n});\n\n// run\nmocha.run(function(failures) {\n  phantom.exit(failures);\n});\n\n````\nNow run in terminal:\n````\n  $ phantomjs test/bg.test.js\n\n  background page\n    âœ“ should display opened tabs in button badge\n\n  1 passing (98ms)\n````\nPlease see full [example here](/example)\n\n## How to trigger chrome event manually?\nYou can call `trigger` method on any mocked chrome event:\n````js\nchrome.tab.onCreated.trigger({url: 'http://google.com'});\n// OR (pass data as array)\nchrome.tab.onUpdated.applyTrigger([1, {status: \"complete\"}, {id: 1, url: 'http://google.com'}]);\n````\n\n## More questions?\nFeel free to [open issue](https://github.com/vitalets/sinon-chrome/issues).\n",
  "readmeFilename": "README.md",
  "_id": "sinon-chrome@0.2.1",
  "dist": {
    "shasum": "26154f72d866412b6f184cc54bbaf85e9742a04c"
  },
  "_from": "sinon-chrome@",
  "_resolved": "https://registry.npmjs.org/sinon-chrome/-/sinon-chrome-0.2.1.tgz"
}
